# backend/services/reports/complete_tax_report.py

from io import BytesIO
from typing import Dict, Any, List
from reportlab.lib.pagesizes import letter
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.platypus import (
    SimpleDocTemplate, Paragraph, Table, TableStyle, Spacer, PageBreak
)
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.pdfgen.canvas import Canvas
import logging

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def generate_comprehensive_tax_report(report_dict: Dict[str, Any]) -> bytes:
    """
    Generates a comprehensive tax report PDF in the style of Koinly, focusing only on USD and BTC.
    Layout includes:
    - Title page with tax year, date, period, content list, and notes.
    - Sections for summaries, detailed transactions, and data sources.
    - Proper formatting with no field bleeding, proportional spacing, and professional styling.

    Args:
        report_dict: Dictionary containing tax report data from reporting_core.py.

    Returns:
        bytes: PDF content as a byte string.
    """
    buffer = BytesIO()
    styles = getSampleStyleSheet()

    # Custom styles
    heading_style = ParagraphStyle(
        name="Heading1Left",
        parent=styles["Heading1"],
        alignment=0,  # Left-aligned
        spaceBefore=12,
        spaceAfter=8,
    )
    normal_style = styles["Normal"]
    wrapped_style = ParagraphStyle(
        name="Wrapped",
        parent=normal_style,
        fontSize=8,
        leading=10,
        wordWrap="CJK",
    )
    right_aligned_style = ParagraphStyle(
        name="RightAligned",
        parent=wrapped_style,
        alignment=2,  # Right-aligned
    )

    # Document setup
    doc = SimpleDocTemplate(
        buffer,
        pagesize=letter,
        leftMargin=1.0 * inch,
        rightMargin=0.75 * inch,
        topMargin=0.75 * inch,
        bottomMargin=0.75 * inch,
    )

    # Page numbering callbacks
    def on_first_page(canvas: Canvas, doc_obj):
        pass  # No page number on title page

    def on_later_pages(canvas: Canvas, doc_obj):
        page_num = doc_obj.page - 1  # Second page is "Page 1"
        canvas.setFont("Helvetica", 9)
        canvas.drawString(0.5 * inch, 0.5 * inch, f"Generated by BitcoinTX")
        canvas.drawRightString(7.75 * inch, 0.5 * inch, f"{page_num} (37)")

    story: List = []

    # Helper function to wrap text
    def wrap_text(text: str, style=wrapped_style) -> Paragraph:
        return Paragraph(str(text).replace("multiple lots", "multi-lots"), style) if text else Paragraph("", style)

    # --- Title Page ---
    tax_year = report_dict.get("tax_year", "Unknown Year")
    report_date = report_dict.get("report_date", "Unknown Date")
    period = report_dict.get("period", "N/A")

    story.append(Paragraph(f"Tax Report {tax_year}", styles["Title"]))
    story.append(Spacer(1, 0.2 * inch))
    story.append(Paragraph(f"Date: {report_date}", normal_style))
    story.append(Paragraph(f"Period: {period}", normal_style))
    story.append(Spacer(1, 0.2 * inch))
    story.append(Paragraph("Content", heading_style))
    content_list = [
        "1. Capital Gains Summary",
        "2. Income Summary",
        "3. Miscellaneous Summary",
        "4. Asset Summary",
        "5. End of Year Balances",
        "6. Capital Gains Transactions",
        "7. Income Transactions",
        "8. Gifts, Donations & Lost Assets",
        "9. Expenses",
        "10. Data Sources"
    ]
    for item in content_list:
        story.append(Paragraph(item, normal_style))
    story.append(Spacer(1, 0.2 * inch))
    notes = (
        "All fiat values and prices are in USD unless stated otherwise. Capital gains have been calculated "
        "using the FIFO accounting method. Trading between BTC and USD is treated as a taxable event. "
        "Market prices are determined using the average market value at the time of disposal unless overridden. "
        "All dates and times are in UTC. Capital gains from BTC with a holding period over 1 year are marked as "
        "Long Term gains; shorter periods are Short Term gains. This report may be used for tax purposes after "
        "verification by you or your tax advisor."
    )
    story.append(Paragraph(notes, normal_style))
    story.append(Paragraph("Generated by BitcoinTX", normal_style))
    story.append(PageBreak())

    # --- Capital Gains Summary ---
    cg_summary = report_dict.get("capital_gains_summary", {})
    if cg_summary:
        story.append(Paragraph(f"TAX YEAR {tax_year}", heading_style))
        story.append(Paragraph("Capital Gains Summary", heading_style))
        story.append(Paragraph("Summary of your profit and loss from BTC disposals/sales.", normal_style))
        story.append(Spacer(1, 0.1 * inch))
        short_term = cg_summary.get("short_term", {})
        long_term = cg_summary.get("long_term", {})
        total = cg_summary.get("total", {})
        data = [
            ["", "Short Term", "Long Term"],
            ["Number of Disposals", str(cg_summary.get("number_of_disposals", 0)), ""],
            ["Proceeds from Sales", f"${short_term.get('proceeds', 0):,.2f}", f"${long_term.get('proceeds', 0):,.2f}"],
            ["Acquisition Costs", f"${short_term.get('basis', 0):,.2f}", f"${long_term.get('basis', 0):,.2f}"],
            ["Profits, Before Losses", f"${max(short_term.get('gain', 0), 0):,.2f}", f"${max(long_term.get('gain', 0), 0):,.2f}"],
            ["Losses", f"${-min(short_term.get('gain', 0), 0):,.2f}", f"${-min(long_term.get('gain', 0), 0):,.2f}"],
            ["Net Gains", f"${short_term.get('gain', 0):,.2f}", f"${long_term.get('gain', 0):,.2f}"]
        ]
        table = Table(data, colWidths=[2.5 * inch, 2 * inch, 2 * inch])
        table.setStyle(TableStyle([
            ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
            ("ALIGN", (1, 0), (-1, -1), "RIGHT"),
            ("VALIGN", (0, 0), (-1, -1), "TOP"),
            ("FONTSIZE", (0, 0), (-1, -1), 8),
        ]))
        story.append(table)
        story.append(Spacer(1, 0.5 * inch))

    # --- Income Summary ---
    inc_summary = report_dict.get("income_summary", {})
    if inc_summary:
        story.append(Paragraph(f"TAX YEAR {tax_year}", heading_style))
        story.append(Paragraph("Income Summary", heading_style))
        story.append(Paragraph("Summary of any income from BTC or USD events during the tax year.", normal_style))
        data = [
            ["Airdrop", "$0.00"],
            ["Fork", "$0.00"],
            ["Mining", f"${inc_summary.get('Mining', 0):,.2f}"],
            ["Reward", f"${inc_summary.get('Reward', 0):,.2f}"],
            ["Salary", "$0.00"],
            ["Lending Interest", "$0.00"],
            ["Other Income", f"${inc_summary.get('Other', 0):,.2f}"],
            ["Total", f"${inc_summary.get('Total', 0):,.2f}"]
        ]
        table = Table(data, colWidths=[2.5 * inch, 2 * inch])
        table.setStyle(TableStyle([
            ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
            ("ALIGN", (1, 0), (-1, -1), "RIGHT"),
            ("FONTSIZE", (0, 0), (-1, -1), 8),
        ]))
        story.append(table)
        story.append(Spacer(1, 0.5 * inch))

    # --- Miscellaneous Summary ---
    misc_summary = report_dict.get("miscellaneous_summary", {})
    if misc_summary:
        story.append(Paragraph(f"TAX YEAR {tax_year}", heading_style))
        story.append(Paragraph("Miscellaneous Summary", heading_style))
        story.append(Paragraph("This section shows the value of other tagged transactions.", normal_style))
        data = [
            ["Cashback", f"${misc_summary.get('Cashback', 0):,.2f}"],
            ["Fee Refund", f"${misc_summary.get('Fee refund', 0):,.2f}"],
            ["Tax", f"${misc_summary.get('Tax', 0):,.2f}"]
        ]
        table = Table(data, colWidths=[2.5 * inch, 2 * inch])
        table.setStyle(TableStyle([
            ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
            ("ALIGN", (1, 0), (-1, -1), "RIGHT"),
            ("FONTSIZE", (0, 0), (-1, -1), 8),
        ]))
        story.append(table)
        story.append(Spacer(1, 0.5 * inch))

    # --- Asset Summary ---
    asset_summary = report_dict.get("asset_summary", [])
    if asset_summary:
        story.append(Paragraph(f"TAX YEAR {tax_year}", heading_style))
        story.append(Paragraph("Asset Summary", heading_style))
        data = [["Asset", "Profit (USD)", "Loss (USD)", "Net (USD)"]]
        for asset in asset_summary:
            if asset["asset"] == "BTC":
                data.append([
                    wrap_text(asset["asset"]),
                    Paragraph(f"${asset['profit']:,.2f}", right_aligned_style),
                    Paragraph(f"${asset['loss']:,.2f}", right_aligned_style),
                    Paragraph(f"${asset['net']:,.2f}", right_aligned_style)
                ])
        data.append([
            "Total",
            Paragraph(f"${sum(a['profit'] for a in asset_summary if a['asset'] == 'BTC'):,.2f}", right_aligned_style),
            Paragraph(f"${sum(a['loss'] for a in asset_summary if a['asset'] == 'BTC'):,.2f}", right_aligned_style),
            Paragraph(f"${sum(a['net'] for a in asset_summary if a['asset'] == 'BTC'):,.2f}", right_aligned_style)
        ])
        table = Table(data, colWidths=[1.5 * inch, 1.5 * inch, 1.5 * inch, 1.5 * inch])
        table.setStyle(TableStyle([
            ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
            ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
            ("ALIGN", (1, 0), (-1, -1), "RIGHT"),
            ("FONTSIZE", (0, 0), (-1, -1), 8),
            ("VALIGN", (0, 0), (-1, -1), "TOP"),
        ]))
        story.append(table)
        story.append(Spacer(1, 0.5 * inch))

    # --- End of Year Balances ---
    eoy_balances = report_dict.get("end_of_year_balances", [])
    if eoy_balances:
        story.append(Paragraph(f"TAX YEAR {tax_year}", heading_style))
        story.append(Paragraph("End of Year Balances", heading_style))
        data = [["Asset", "Quantity", "Cost (USD)", "Value (USD)", "Description"]]
        for bal in eoy_balances:
            if bal["asset"].startswith("BTC"):
                data.append([
                    wrap_text(bal["asset"]),
                    Paragraph(f"{bal['quantity']:,.8f}", right_aligned_style),
                    Paragraph(f"${bal['cost']:,.2f}", right_aligned_style),
                    Paragraph(f"${bal['value']:,.2f}", right_aligned_style),
                    wrap_text(bal["description"])
                ])
        table = Table(data, colWidths=[1.5 * inch, 1.2 * inch, 1.2 * inch, 1.2 * inch, 1.5 * inch])
        table.setStyle(TableStyle([
            ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
            ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
            ("ALIGN", (1, 0), (3, -1), "RIGHT"),
            ("FONTSIZE", (0, 0), (-1, -1), 8),
            ("VALIGN", (0, 0), (-1, -1), "TOP"),
        ]))
        story.append(table)
        story.append(Spacer(1, 0.5 * inch))

    # --- Capital Gains Transactions ---
    cg_transactions = report_dict.get("capital_gains_transactions", [])
    if cg_transactions:
        story.append(Paragraph(f"TAX YEAR {tax_year}", heading_style))
        story.append(Paragraph("Capital Gains Transactions", heading_style))
        data = [["Date Sold", "Date Acquired", "Asset", "Amount", "Cost (USD)", "Proceeds (USD)", "Gain / Loss", "Holding Period"]]
        for tx in cg_transactions:
            if tx["asset"] == "BTC":
                data.append([
                    wrap_text(tx["date_sold"].split("T")[0] + " " + tx["date_sold"].split("T")[1][:5]),
                    wrap_text(tx["date_acquired"]),
                    wrap_text(tx["asset"]),
                    Paragraph(f"{tx['amount']:,.8f}", right_aligned_style),
                    Paragraph(f"${tx['cost']:,.2f}", right_aligned_style),
                    Paragraph(f"${tx['proceeds']:,.2f}", right_aligned_style),
                    Paragraph(f"${tx['gain_loss']:,.2f}", right_aligned_style),
                    wrap_text(tx["holding_period"])
                ])
        table = Table(data, colWidths=[1.2 * inch, 1.2 * inch, 0.6 * inch, 0.8 * inch, 0.8 * inch, 0.8 * inch, 0.8 * inch, 0.8 * inch])
        table.setStyle(TableStyle([
            ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
            ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
            ("ALIGN", (3, 0), (6, -1), "RIGHT"),
            ("FONTSIZE", (0, 0), (-1, -1), 8),
            ("VALIGN", (0, 0), (-1, -1), "TOP"),
        ]))
        story.append(table)
        story.append(Spacer(1, 0.5 * inch))

    # --- Income Transactions ---
    inc_transactions = report_dict.get("income_transactions", [])
    if inc_transactions:
        story.append(Paragraph(f"TAX YEAR {tax_year}", heading_style))
        story.append(Paragraph("Income Transactions", heading_style))
        data = [["Date", "Asset", "Amount", "Value (USD)", "Type", "Description"]]
        for tx in inc_transactions:
            if tx["asset"] in ["BTC", "USD"]:
                data.append([
                    wrap_text(tx["date"].split("T")[0] + " " + tx["date"].split("T")[1][:5]),
                    wrap_text(tx["asset"]),
                    Paragraph(f"{tx['amount']:,.8f}", right_aligned_style),
                    Paragraph(f"${tx['value_usd']:,.2f}", right_aligned_style),
                    wrap_text(tx["type"]),
                    wrap_text(tx["description"])
                ])
        table = Table(data, colWidths=[1.2 * inch, 0.6 * inch, 0.8 * inch, 0.8 * inch, 0.8 * inch, 2.5 * inch])
        table.setStyle(TableStyle([
            ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
            ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
            ("ALIGN", (2, 0), (3, -1), "RIGHT"),
            ("FONTSIZE", (0, 0), (-1, -1), 8),
            ("VALIGN", (0, 0), (-1, -1), "TOP"),
        ]))
        story.append(table)
        story.append(Spacer(1, 0.5 * inch))

    # --- Gifts, Donations & Lost Assets ---
    gifts_lost = report_dict.get("gifts_donations_lost", [])
    if gifts_lost:
        story.append(Paragraph(f"TAX YEAR {tax_year}", heading_style))
        story.append(Paragraph("Gifts, Donations & Lost Assets", heading_style))
        data = [["Date", "Asset", "Amount", "Value (USD)", "Type"]]
        for item in gifts_lost:
            if item["asset"] == "BTC":
                data.append([
                    wrap_text(item["date"].split("T")[0] + " " + item["date"].split("T")[1][:5]),
                    wrap_text(item["asset"]),
                    Paragraph(f"{item['amount']:,.8f}", right_aligned_style),
                    Paragraph(f"${item['value_usd']:,.2f}", right_aligned_style),
                    wrap_text(item["type"])
                ])
        table = Table(data, colWidths=[1.2 * inch, 0.8 * inch, 1.0 * inch, 1.0 * inch, 1.5 * inch])
        table.setStyle(TableStyle([
            ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
            ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
            ("ALIGN", (2, 0), (3, -1), "RIGHT"),
            ("FONTSIZE", (0, 0), (-1, -1), 8),
            ("VALIGN", (0, 0), (-1, -1), "TOP"),
        ]))
        story.append(table)
        story.append(Spacer(1, 0.5 * inch))

    # --- Expenses ---
    expenses = report_dict.get("expenses", [])
    story.append(Paragraph(f"TAX YEAR {tax_year}", heading_style))
    story.append(Paragraph("Expenses", heading_style))
    if not expenses:
        story.append(Paragraph("No transactions", normal_style))
    else:
        data = [["Date", "Asset", "Amount", "Value (USD)", "Type"]]
        for exp in expenses:
            if exp["asset"] in ["BTC", "USD"]:
                data.append([
                    wrap_text(exp["date"].split("T")[0] + " " + exp["date"].split("T")[1][:5]),
                    wrap_text(exp["asset"]),
                    Paragraph(f"{exp['amount']:,.8f}", right_aligned_style),
                    Paragraph(f"${exp['value_usd']:,.2f}", right_aligned_style),
                    wrap_text(exp["type"])
                ])
        table = Table(data, colWidths=[1.2 * inch, 0.8 * inch, 1.0 * inch, 1.0 * inch, 1.5 * inch])
        table.setStyle(TableStyle([
            ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
            ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
            ("ALIGN", (2, 0), (3, -1), "RIGHT"),
            ("FONTSIZE", (0, 0), (-1, -1), 8),
            ("VALIGN", (0, 0), (-1, -1), "TOP"),
        ]))
        story.append(table)
    story.append(Spacer(1, 0.5 * inch))

    # --- Data Sources ---
    data_sources = report_dict.get("data_sources", [])
    if data_sources:
        story.append(Paragraph(f"TAX YEAR {tax_year}", heading_style))
        story.append(Paragraph("Data Sources", heading_style))
        story.append(Paragraph("The data sources used to generate this report are listed below.", normal_style))
        data = [[f"{i+1}. {source}" for i, source in enumerate(data_sources)]]
        table = Table(data, colWidths=[6.75 * inch])
        table.setStyle(TableStyle([
            ("FONTSIZE", (0, 0), (-1, -1), 8),
            ("VALIGN", (0, 0), (-1, -1), "TOP"),
        ]))
        story.append(table)
        story.append(Spacer(1, 0.5 * inch))

    # Build the PDF
    doc.build(story, onFirstPage=on_first_page, onLaterPages=on_later_pages)
    pdf_bytes = buffer.getvalue()
    buffer.close()
    logger.info(f"Generated comprehensive tax report for {tax_year}")
    return pdf_bytes

if __name__ == "__main__":
    # Test with sample data
    sample_report = {
        "tax_year": "2024",
        "report_date": "2025-01-01 09:52",
        "period": "1 Jan 2024 to 31 Dec 2024",
        "capital_gains_summary": {
            "number_of_disposals": 10,
            "short_term": {"proceeds": 10000.0, "basis": 8000.0, "gain": 2000.0},
            "long_term": {"proceeds": 5000.0, "basis": 3000.0, "gain": 2000.0},
            "total": {"proceeds": 15000.0, "basis": 11000.0, "gain": 4000.0}
        },
        "income_summary": {"Mining": 500.0, "Reward": 300.0, "Other": 200.0, "Total": 1000.0},
        "miscellaneous_summary": {"Cashback": 0.0, "Fee refund": 0.0, "Tax": 0.0},
        "asset_summary": [{"asset": "BTC", "profit": 4000.0, "loss": 0.0, "net": 4000.0}],
        "end_of_year_balances": [
            {"asset": "BTC", "quantity": 0.5, "cost": 20000.0, "value": 47076.57, "description": "@ $94153.13 per BTC"}
        ],
        "capital_gains_transactions": [
            {"date_sold": "2024-01-04T10:43:00Z", "date_acquired": "multi-lots", "asset": "BTC", "amount": 0.01099351, "cost": 483.88, "proceeds": 480.36, "gain_loss": -3.52, "holding_period": "SHORT"}
        ],
        "income_transactions": [
            {"date": "2024-01-04T10:40:00Z", "asset": "BTC", "amount": 0.01099351, "value_usd": 483.88, "type": "Other", "description": "river"}
        ],
        "gifts_donations_lost": [
            {"date": "2024-12-25T18:00:00Z", "asset": "BTC", "amount": 0.011, "value_usd": 1111.12, "type": "Gift"}
        ],
        "expenses": [],
        "data_sources": ["river", "Ledger_Accumulation"]
    }
    pdf = generate_comprehensive_tax_report(sample_report)
    with open("test_report.pdf", "wb") as f:
        f.write(pdf)